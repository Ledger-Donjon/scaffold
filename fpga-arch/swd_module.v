//
// Generated by Bluespec Compiler, version 2024.01-9-gc481d7f5 (build c481d7f5)
//
// On Wed Sep  4 10:01:30 CEST 2024
//
//
// Ports:
// Name                         I/O  size props
// reg_rdata                      O     8 reg
// reg_status                     O     8 reg
// swclk                          O     1 reg
// swd_out                        O     1 reg
// out_en                         O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// address                        I    16 unused
// write_data                     I     8
// write                          I     1
// read                           I     1
// en_rdata                       I     1
// en_wdata                       I     1
// en_cmd                         I     1
// en_status                      I     1
// swd_in                         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module swd_module(CLK,
		  RST_N,

		  address,

		  write_data,

		  write,

		  read,

		  en_rdata,

		  en_wdata,

		  en_cmd,

		  en_status,

		  reg_rdata,

		  reg_status,

		  swclk,

		  swd_in,

		  swd_out,

		  out_en);
  input  CLK;
  input  RST_N;

  // action method bus_address
  input  [15 : 0] address;

  // action method bus_write_data
  input  [7 : 0] write_data;

  // action method bus_write
  input  write;

  // action method bus_read
  input  read;

  // action method bus_en_rdata
  input  en_rdata;

  // action method bus_en_wdata
  input  en_wdata;

  // action method bus_en_cmd
  input  en_cmd;

  // action method bus_en_status
  input  en_status;

  // value method bus_reg_rdata
  output [7 : 0] reg_rdata;

  // value method bus_reg_status
  output [7 : 0] reg_status;

  // value method pins_swclk
  output swclk;

  // action method pins_swd_in
  input  swd_in;

  // value method pins_swd_out
  output swd_out;

  // value method pins_out_en
  output out_en;

  // signals for module outputs
  wire [7 : 0] reg_rdata, reg_status;
  wire out_en, swclk, swd_out;

  // inlined wires
  wire swd_controller_request_in$whas, swd_controller_reset_in$whas;

  // register bus_reg_rdata
  reg [7 : 0] bus_reg_rdata;
  wire [7 : 0] bus_reg_rdata$D_IN;
  wire bus_reg_rdata$EN;

  // register bus_reg_status
  reg [7 : 0] bus_reg_status;
  wire [7 : 0] bus_reg_status$D_IN;
  wire bus_reg_status$EN;

  // register cmd
  reg [8 : 0] cmd;
  wire [8 : 0] cmd$D_IN;
  wire cmd$EN;

  // register rdata
  reg [31 : 0] rdata;
  wire [31 : 0] rdata$D_IN;
  wire rdata$EN;

  // register ready
  reg ready;
  wire ready$D_IN, ready$EN;

  // register state
  reg [1 : 0] state;
  reg [1 : 0] state$D_IN;
  wire state$EN;

  // register status
  reg [1 : 0] status;
  wire [1 : 0] status$D_IN;
  wire status$EN;

  // register swd_controller_ack
  reg [2 : 0] swd_controller_ack;
  wire [2 : 0] swd_controller_ack$D_IN;
  wire swd_controller_ack$EN;

  // register swd_controller_cnt
  reg [6 : 0] swd_controller_cnt;
  reg [6 : 0] swd_controller_cnt$D_IN;
  wire swd_controller_cnt$EN;

  // register swd_controller_data
  reg [32 : 0] swd_controller_data;
  reg [32 : 0] swd_controller_data$D_IN;
  wire swd_controller_data$EN;

  // register swd_controller_out_en
  reg swd_controller_out_en;
  wire swd_controller_out_en$D_IN, swd_controller_out_en$EN;

  // register swd_controller_packet
  reg [7 : 0] swd_controller_packet;
  reg [7 : 0] swd_controller_packet$D_IN;
  wire swd_controller_packet$EN;

  // register swd_controller_rnw
  reg swd_controller_rnw;
  wire swd_controller_rnw$D_IN, swd_controller_rnw$EN;

  // register swd_controller_state
  reg [3 : 0] swd_controller_state;
  reg [3 : 0] swd_controller_state$D_IN;
  wire swd_controller_state$EN;

  // register swd_controller_status
  reg [2 : 0] swd_controller_status;
  wire [2 : 0] swd_controller_status$D_IN;
  wire swd_controller_status$EN;

  // register swd_controller_swclk
  reg swd_controller_swclk;
  wire swd_controller_swclk$D_IN, swd_controller_swclk$EN;

  // register swd_controller_swd_out
  reg swd_controller_swd_out;
  reg swd_controller_swd_out$D_IN;
  wire swd_controller_swd_out$EN;

  // register wdata
  reg [31 : 0] wdata;
  wire [31 : 0] wdata$D_IN;
  wire wdata$EN;

  // ports of submodule swd_controller_prescaler_ctr
  wire [7 : 0] swd_controller_prescaler_ctr$DATA_A,
	       swd_controller_prescaler_ctr$DATA_B,
	       swd_controller_prescaler_ctr$DATA_C,
	       swd_controller_prescaler_ctr$DATA_F,
	       swd_controller_prescaler_ctr$Q_OUT;
  wire swd_controller_prescaler_ctr$ADDA,
       swd_controller_prescaler_ctr$ADDB,
       swd_controller_prescaler_ctr$SETC,
       swd_controller_prescaler_ctr$SETF;

  // rule scheduling signals
  wire WILL_FIRE_RL_do_bus_read_rdata,
       WILL_FIRE_RL_do_bus_write,
       WILL_FIRE_RL_do_idle,
       WILL_FIRE_RL_do_reset,
       WILL_FIRE_RL_do_rw;

  // inputs to muxes for submodule ports
  reg [2 : 0] MUX_swd_controller_status$write_1__VAL_1;
  wire [32 : 0] MUX_swd_controller_data$write_1__VAL_1,
		MUX_swd_controller_data$write_1__VAL_2,
		MUX_swd_controller_data$write_1__VAL_3;
  wire [31 : 0] MUX_rdata$write_1__VAL_1, MUX_rdata$write_1__VAL_2;
  wire [8 : 0] MUX_cmd$write_1__VAL_1;
  wire [7 : 0] MUX_swd_controller_packet$write_1__VAL_2,
	       MUX_swd_controller_packet$write_1__VAL_3;
  wire [6 : 0] MUX_swd_controller_cnt$write_1__VAL_2,
	       MUX_swd_controller_cnt$write_1__VAL_4,
	       MUX_swd_controller_cnt$write_1__VAL_5,
	       MUX_swd_controller_cnt$write_1__VAL_6;
  wire [3 : 0] MUX_swd_controller_state$write_1__VAL_1,
	       MUX_swd_controller_state$write_1__VAL_3,
	       MUX_swd_controller_state$write_1__VAL_7;
  wire [1 : 0] MUX_state$write_1__VAL_2;
  wire MUX_cmd$write_1__SEL_1,
       MUX_state$write_1__SEL_1,
       MUX_swd_controller_cnt$write_1__PSEL_1,
       MUX_swd_controller_cnt$write_1__PSEL_6,
       MUX_swd_controller_cnt$write_1__SEL_1,
       MUX_swd_controller_cnt$write_1__SEL_2,
       MUX_swd_controller_cnt$write_1__SEL_3,
       MUX_swd_controller_cnt$write_1__SEL_4,
       MUX_swd_controller_cnt$write_1__SEL_5,
       MUX_swd_controller_cnt$write_1__SEL_6,
       MUX_swd_controller_data$write_1__SEL_1,
       MUX_swd_controller_data$write_1__SEL_2,
       MUX_swd_controller_data$write_1__SEL_3,
       MUX_swd_controller_packet$write_1__SEL_2,
       MUX_swd_controller_packet$write_1__SEL_3,
       MUX_swd_controller_state$write_1__PSEL_4,
       MUX_swd_controller_state$write_1__SEL_3,
       MUX_swd_controller_state$write_1__SEL_4,
       MUX_swd_controller_state$write_1__SEL_5,
       MUX_swd_controller_state$write_1__SEL_6,
       MUX_swd_controller_status$write_1__SEL_1,
       MUX_swd_controller_swclk$write_1__SEL_1,
       MUX_swd_controller_swclk$write_1__SEL_2,
       MUX_swd_controller_swd_out$write_1__PSEL_4,
       MUX_swd_controller_swd_out$write_1__SEL_2,
       MUX_swd_controller_swd_out$write_1__SEL_3,
       MUX_swd_controller_swd_out$write_1__SEL_4,
       MUX_swd_controller_swd_out$write_1__VAL_2,
       MUX_swd_controller_swd_out$write_1__VAL_3;

  // remaining internal signals
  wire [15 : 0] _0xE79E__q2;
  wire [6 : 0] i__h1364, x__h14824;
  wire [1 : 0] cmd_BITS_1_TO_0__q1;
  wire swd_controller_cnt_2_ULE_8___d35,
       swd_controller_data_2_BIT_0_5_XOR_swd_controll_ETC___d300,
       x__h1345,
       x__h19907,
       x__h19920,
       x__h19922,
       x__h21060,
       x__h21073,
       z__h24307,
       z__h24314,
       z__h24321,
       z__h24328,
       z__h24335,
       z__h24342,
       z__h24349,
       z__h24356,
       z__h24363,
       z__h24370,
       z__h24377,
       z__h24384,
       z__h24391,
       z__h24398,
       z__h24405,
       z__h24412,
       z__h24419,
       z__h24426,
       z__h24433,
       z__h24440,
       z__h24447,
       z__h24454,
       z__h24461,
       z__h24468,
       z__h24475,
       z__h24482,
       z__h24489,
       z__h24496,
       z__h24503,
       z__h24510,
       z__h34868,
       z__h34875,
       z__h34882,
       z__h34889,
       z__h34896,
       z__h34903,
       z__h34910,
       z__h34917,
       z__h34924,
       z__h34931,
       z__h34938,
       z__h34945,
       z__h34952,
       z__h34959,
       z__h34966,
       z__h34973,
       z__h34980,
       z__h34987,
       z__h34994,
       z__h35001,
       z__h35008,
       z__h35015,
       z__h35022,
       z__h35029,
       z__h35036,
       z__h35043,
       z__h35050,
       z__h35057,
       z__h35064,
       z__h35071,
       z__h35078;

  // value method bus_reg_rdata
  assign reg_rdata = bus_reg_rdata ;

  // value method bus_reg_status
  assign reg_status = bus_reg_status ;

  // value method pins_swclk
  assign swclk = swd_controller_swclk ;

  // value method pins_swd_out
  assign swd_out = swd_controller_swd_out ;

  // value method pins_out_en
  assign out_en = swd_controller_out_en ;

  // submodule swd_controller_prescaler_ctr
  Counter #(.width(32'd8),
	    .init(8'd99)) swd_controller_prescaler_ctr(.CLK(CLK),
						       .RST(RST_N),
						       .DATA_A(swd_controller_prescaler_ctr$DATA_A),
						       .DATA_B(swd_controller_prescaler_ctr$DATA_B),
						       .DATA_C(swd_controller_prescaler_ctr$DATA_C),
						       .DATA_F(swd_controller_prescaler_ctr$DATA_F),
						       .ADDA(swd_controller_prescaler_ctr$ADDA),
						       .ADDB(swd_controller_prescaler_ctr$ADDB),
						       .SETC(swd_controller_prescaler_ctr$SETC),
						       .SETF(swd_controller_prescaler_ctr$SETF),
						       .Q_OUT(swd_controller_prescaler_ctr$Q_OUT));

  // rule RL_do_bus_read_rdata
  assign WILL_FIRE_RL_do_bus_read_rdata = read && en_rdata && state != 2'd2 ;

  // rule RL_do_bus_write
  assign WILL_FIRE_RL_do_bus_write = write && state == 2'd0 ;

  // rule RL_do_idle
  assign WILL_FIRE_RL_do_idle =
	     swd_controller_state == 4'd0 && !swd_controller_status[2] &&
	     state == 2'd0 &&
	     !write &&
	     cmd[8] ;

  // rule RL_do_reset
  assign WILL_FIRE_RL_do_reset =
	     swd_controller_state == 4'd0 && !swd_controller_status[2] &&
	     state == 2'd1 ;

  // rule RL_do_rw
  assign WILL_FIRE_RL_do_rw =
	     swd_controller_state == 4'd0 && swd_controller_status[2] &&
	     state == 2'd2 ;

  // inputs to muxes for submodule ports
  assign MUX_cmd$write_1__SEL_1 = WILL_FIRE_RL_do_bus_write && en_cmd ;
  assign MUX_state$write_1__SEL_1 = WILL_FIRE_RL_do_reset && ready ;
  assign MUX_swd_controller_cnt$write_1__PSEL_1 =
	     swd_controller_state == 4'd7 || swd_controller_state == 4'd1 ||
	     swd_controller_state == 4'd8 ;
  assign MUX_swd_controller_cnt$write_1__SEL_1 =
	     MUX_swd_controller_cnt$write_1__PSEL_1 &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd0 ;
  assign MUX_swd_controller_cnt$write_1__SEL_2 =
	     swd_controller_state == 4'd4 &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd1 ;
  assign MUX_swd_controller_cnt$write_1__SEL_3 =
	     swd_controller_state == 4'd2 &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd1 ;
  assign MUX_swd_controller_cnt$write_1__SEL_4 =
	     swd_controller_state == 4'd0 &&
	     (swd_controller_request_in$whas ||
	      swd_controller_reset_in$whas) ;
  assign MUX_swd_controller_cnt$write_1__SEL_5 =
	     swd_controller_state == 4'd3 &&
	     (swd_controller_prescaler_ctr$Q_OUT == 8'd0 ||
	      swd_controller_prescaler_ctr$Q_OUT == 8'd1 &&
	      swd_controller_cnt == 7'd0 &&
	      swd_controller_rnw) ;
  assign MUX_swd_controller_cnt$write_1__PSEL_6 =
	     swd_controller_state == 4'd6 || swd_controller_state == 4'd5 ;
  assign MUX_swd_controller_cnt$write_1__SEL_6 =
	     MUX_swd_controller_cnt$write_1__PSEL_6 &&
	     (swd_controller_prescaler_ctr$Q_OUT == 8'd0 ||
	      swd_controller_prescaler_ctr$Q_OUT == 8'd1 &&
	      swd_controller_cnt == 7'd0) ;
  assign MUX_swd_controller_data$write_1__SEL_1 =
	     swd_controller_state == 4'd5 &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd0 ;
  assign MUX_swd_controller_data$write_1__SEL_2 =
	     swd_controller_state == 4'd6 &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd0 ;
  assign MUX_swd_controller_data$write_1__SEL_3 =
	     WILL_FIRE_RL_do_idle && !cmd[7] && !cmd[2] ;
  assign MUX_swd_controller_packet$write_1__SEL_2 =
	     WILL_FIRE_RL_do_idle && !cmd[7] ;
  assign MUX_swd_controller_packet$write_1__SEL_3 =
	     swd_controller_state == 4'd1 &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd0 &&
	     swd_controller_cnt_2_ULE_8___d35 ;
  assign MUX_swd_controller_state$write_1__SEL_3 =
	     swd_controller_state == 4'd3 &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd1 &&
	     swd_controller_cnt == 7'd0 ;
  assign MUX_swd_controller_state$write_1__PSEL_4 =
	     swd_controller_state == 4'd7 || swd_controller_state == 4'd8 ;
  assign MUX_swd_controller_state$write_1__SEL_4 =
	     MUX_swd_controller_state$write_1__PSEL_4 &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd1 &&
	     swd_controller_cnt == 7'd0 ;
  assign MUX_swd_controller_state$write_1__SEL_5 =
	     swd_controller_state == 4'd1 &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd1 &&
	     swd_controller_cnt == 7'd0 ;
  assign MUX_swd_controller_state$write_1__SEL_6 =
	     MUX_swd_controller_cnt$write_1__PSEL_6 &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd1 &&
	     swd_controller_cnt == 7'd0 ;
  assign MUX_swd_controller_status$write_1__SEL_1 =
	     swd_controller_state == 4'd7 &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd0 ;
  assign MUX_swd_controller_swclk$write_1__SEL_1 =
	     swd_controller_state != 4'd0 &&
	     (swd_controller_prescaler_ctr$Q_OUT == 8'd0 ||
	      swd_controller_prescaler_ctr$Q_OUT == 8'd50) ;
  assign MUX_swd_controller_swclk$write_1__SEL_2 =
	     swd_controller_state == 4'd0 &&
	     !swd_controller_request_in$whas &&
	     !swd_controller_reset_in$whas ;
  assign MUX_swd_controller_swd_out$write_1__SEL_2 =
	     swd_controller_state == 4'd8 &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd0 ;
  assign MUX_swd_controller_swd_out$write_1__SEL_3 =
	     swd_controller_state == 4'd1 &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd0 ;
  assign MUX_swd_controller_swd_out$write_1__PSEL_4 =
	     swd_controller_state == 4'd4 || swd_controller_state == 4'd2 ;
  assign MUX_swd_controller_swd_out$write_1__SEL_4 =
	     MUX_swd_controller_swd_out$write_1__PSEL_4 &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd0 ;
  assign MUX_cmd$write_1__VAL_1 = { 1'd1, write_data } ;
  assign MUX_rdata$write_1__VAL_1 = { 8'd0, rdata[31:8] } ;
  assign MUX_rdata$write_1__VAL_2 =
	     swd_controller_rnw ?
	       (swd_controller_data_2_BIT_0_5_XOR_swd_controll_ETC___d300 ?
		  32'd0 :
		  swd_controller_data[31:0]) :
	       32'd0 ;
  assign MUX_state$write_1__VAL_2 = cmd[7] ? 2'd1 : 2'd2 ;
  assign MUX_swd_controller_cnt$write_1__VAL_2 =
	     (swd_controller_ack == 3'b100) ? 7'd33 : 7'd1 ;
  assign MUX_swd_controller_cnt$write_1__VAL_4 =
	     swd_controller_request_in$whas ? 7'd10 : 7'd126 ;
  assign MUX_swd_controller_cnt$write_1__VAL_5 =
	     (swd_controller_prescaler_ctr$Q_OUT == 8'd0) ?
	       x__h14824 :
	       7'd33 ;
  assign MUX_swd_controller_cnt$write_1__VAL_6 =
	     (swd_controller_prescaler_ctr$Q_OUT == 8'd0) ? x__h14824 : 7'd1 ;
  assign MUX_swd_controller_data$write_1__VAL_1 =
	     { swd_in, swd_controller_data[32:1] } ;
  assign MUX_swd_controller_data$write_1__VAL_2 =
	     { 1'd0, swd_controller_data[32:1] } ;
  assign MUX_swd_controller_data$write_1__VAL_3 =
	     { z__h24510 ^ wdata[7],
	       wdata[7:0],
	       wdata[15:8],
	       wdata[23:16],
	       wdata[31:24] } ;
  assign MUX_swd_controller_packet$write_1__VAL_2 =
	     { 1'd1, cmd[3:0], cmd[2] ? x__h19907 : x__h21060, 2'd1 } ;
  assign MUX_swd_controller_packet$write_1__VAL_3 =
	     { swd_controller_packet[6:0], 1'd0 } ;
  assign MUX_swd_controller_state$write_1__VAL_1 =
	     (swd_controller_ack == 3'b100) ? 4'd6 : 4'd7 ;
  assign MUX_swd_controller_state$write_1__VAL_3 =
	     swd_controller_rnw ? 4'd5 : 4'd4 ;
  assign MUX_swd_controller_state$write_1__VAL_7 =
	     swd_controller_request_in$whas ? 4'd1 : 4'd8 ;
  always@(swd_controller_ack)
  begin
    case (swd_controller_ack)
      3'b001: MUX_swd_controller_status$write_1__VAL_1 = 3'd6;
      3'b010: MUX_swd_controller_status$write_1__VAL_1 = 3'd5;
      3'b100: MUX_swd_controller_status$write_1__VAL_1 = swd_controller_ack;
      default: MUX_swd_controller_status$write_1__VAL_1 = 3'd7;
    endcase
  end
  assign MUX_swd_controller_swd_out$write_1__VAL_2 =
	     swd_controller_cnt > 7'd71 || swd_controller_cnt <= 7'd55 ||
	     x__h1345 ;
  assign MUX_swd_controller_swd_out$write_1__VAL_3 =
	     swd_controller_cnt_2_ULE_8___d35 && swd_controller_packet[7] ;

  // inlined wires
  assign swd_controller_request_in$whas =
	     WILL_FIRE_RL_do_reset && ready ||
	     WILL_FIRE_RL_do_idle && !cmd[7] ;
  assign swd_controller_reset_in$whas = WILL_FIRE_RL_do_idle && cmd[7] ;

  // register bus_reg_rdata
  assign bus_reg_rdata$D_IN = rdata[7:0] ;
  assign bus_reg_rdata$EN = WILL_FIRE_RL_do_bus_read_rdata ;

  // register bus_reg_status
  assign bus_reg_status$D_IN = { state == 2'd0, 5'b0, status } ;
  assign bus_reg_status$EN = read && en_status ;

  // register cmd
  assign cmd$D_IN = MUX_cmd$write_1__SEL_1 ? MUX_cmd$write_1__VAL_1 : 9'd170 ;
  assign cmd$EN = WILL_FIRE_RL_do_bus_write && en_cmd || WILL_FIRE_RL_do_rw ;

  // register rdata
  assign rdata$D_IN =
	     WILL_FIRE_RL_do_bus_read_rdata ?
	       MUX_rdata$write_1__VAL_1 :
	       MUX_rdata$write_1__VAL_2 ;
  assign rdata$EN = WILL_FIRE_RL_do_bus_read_rdata || WILL_FIRE_RL_do_rw ;

  // register ready
  assign ready$D_IN = swd_controller_state == 4'd0 ;
  assign ready$EN = 1'd1 ;

  // register state
  always@(MUX_state$write_1__SEL_1 or
	  WILL_FIRE_RL_do_idle or
	  MUX_state$write_1__VAL_2 or WILL_FIRE_RL_do_rw)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_state$write_1__SEL_1: state$D_IN = 2'd2;
      WILL_FIRE_RL_do_idle: state$D_IN = MUX_state$write_1__VAL_2;
      WILL_FIRE_RL_do_rw: state$D_IN = 2'd0;
      default: state$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign state$EN =
	     WILL_FIRE_RL_do_reset && ready || WILL_FIRE_RL_do_idle ||
	     WILL_FIRE_RL_do_rw ;

  // register status
  assign status$D_IN =
	     swd_controller_rnw ?
	       (swd_controller_data_2_BIT_0_5_XOR_swd_controll_ETC___d300 ?
		  2'd3 :
		  swd_controller_status[1:0]) :
	       swd_controller_status[1:0] ;
  assign status$EN = WILL_FIRE_RL_do_rw ;

  // register swd_controller_ack
  assign swd_controller_ack$D_IN = { swd_controller_ack[1:0], swd_in } ;
  assign swd_controller_ack$EN =
	     swd_controller_state == 4'd3 &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd0 ;

  // register swd_controller_cnt
  always@(MUX_swd_controller_cnt$write_1__SEL_1 or
	  x__h14824 or
	  MUX_swd_controller_cnt$write_1__SEL_2 or
	  MUX_swd_controller_cnt$write_1__VAL_2 or
	  MUX_swd_controller_cnt$write_1__SEL_3 or
	  MUX_swd_controller_cnt$write_1__SEL_4 or
	  MUX_swd_controller_cnt$write_1__VAL_4 or
	  MUX_swd_controller_cnt$write_1__SEL_5 or
	  MUX_swd_controller_cnt$write_1__VAL_5 or
	  MUX_swd_controller_cnt$write_1__SEL_6 or
	  MUX_swd_controller_cnt$write_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_swd_controller_cnt$write_1__SEL_1:
	  swd_controller_cnt$D_IN = x__h14824;
      MUX_swd_controller_cnt$write_1__SEL_2:
	  swd_controller_cnt$D_IN = MUX_swd_controller_cnt$write_1__VAL_2;
      MUX_swd_controller_cnt$write_1__SEL_3: swd_controller_cnt$D_IN = 7'd3;
      MUX_swd_controller_cnt$write_1__SEL_4:
	  swd_controller_cnt$D_IN = MUX_swd_controller_cnt$write_1__VAL_4;
      MUX_swd_controller_cnt$write_1__SEL_5:
	  swd_controller_cnt$D_IN = MUX_swd_controller_cnt$write_1__VAL_5;
      MUX_swd_controller_cnt$write_1__SEL_6:
	  swd_controller_cnt$D_IN = MUX_swd_controller_cnt$write_1__VAL_6;
      default: swd_controller_cnt$D_IN = 7'b0101010 /* unspecified value */ ;
    endcase
  end
  assign swd_controller_cnt$EN =
	     (swd_controller_state == 4'd7 || swd_controller_state == 4'd1 ||
	      swd_controller_state == 4'd8) &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd0 ||
	     swd_controller_state == 4'd4 &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd1 ||
	     swd_controller_state == 4'd2 &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd1 ||
	     swd_controller_state == 4'd0 &&
	     (swd_controller_request_in$whas ||
	      swd_controller_reset_in$whas) ||
	     MUX_swd_controller_cnt$write_1__SEL_5 ||
	     (swd_controller_state == 4'd6 || swd_controller_state == 4'd5) &&
	     (swd_controller_prescaler_ctr$Q_OUT == 8'd0 ||
	      swd_controller_prescaler_ctr$Q_OUT == 8'd1 &&
	      swd_controller_cnt == 7'd0) ;

  // register swd_controller_data
  always@(MUX_swd_controller_data$write_1__SEL_1 or
	  MUX_swd_controller_data$write_1__VAL_1 or
	  MUX_swd_controller_data$write_1__SEL_2 or
	  MUX_swd_controller_data$write_1__VAL_2 or
	  MUX_swd_controller_data$write_1__SEL_3 or
	  MUX_swd_controller_data$write_1__VAL_3 or WILL_FIRE_RL_do_rw)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_swd_controller_data$write_1__SEL_1:
	  swd_controller_data$D_IN = MUX_swd_controller_data$write_1__VAL_1;
      MUX_swd_controller_data$write_1__SEL_2:
	  swd_controller_data$D_IN = MUX_swd_controller_data$write_1__VAL_2;
      MUX_swd_controller_data$write_1__SEL_3:
	  swd_controller_data$D_IN = MUX_swd_controller_data$write_1__VAL_3;
      WILL_FIRE_RL_do_rw: swd_controller_data$D_IN = 33'd0;
      default: swd_controller_data$D_IN =
		   33'h0AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign swd_controller_data$EN =
	     swd_controller_state == 4'd5 &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd0 ||
	     swd_controller_state == 4'd6 &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd0 ||
	     WILL_FIRE_RL_do_idle && !cmd[7] && !cmd[2] ||
	     WILL_FIRE_RL_do_rw ;

  // register swd_controller_out_en
  assign swd_controller_out_en$D_IN =
	     swd_controller_state == 4'd8 || swd_controller_state == 4'd1 ||
	     swd_controller_state == 4'd6 ;
  assign swd_controller_out_en$EN = 1'd1 ;

  // register swd_controller_packet
  always@(MUX_state$write_1__SEL_1 or
	  MUX_swd_controller_packet$write_1__SEL_2 or
	  MUX_swd_controller_packet$write_1__VAL_2 or
	  MUX_swd_controller_packet$write_1__SEL_3 or
	  MUX_swd_controller_packet$write_1__VAL_3 or WILL_FIRE_RL_do_rw)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_state$write_1__SEL_1: swd_controller_packet$D_IN = 8'd165;
      MUX_swd_controller_packet$write_1__SEL_2:
	  swd_controller_packet$D_IN =
	      MUX_swd_controller_packet$write_1__VAL_2;
      MUX_swd_controller_packet$write_1__SEL_3:
	  swd_controller_packet$D_IN =
	      MUX_swd_controller_packet$write_1__VAL_3;
      WILL_FIRE_RL_do_rw: swd_controller_packet$D_IN = 8'd0;
      default: swd_controller_packet$D_IN =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign swd_controller_packet$EN =
	     WILL_FIRE_RL_do_reset && ready ||
	     WILL_FIRE_RL_do_idle && !cmd[7] ||
	     swd_controller_state == 4'd1 &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd0 &&
	     swd_controller_cnt_2_ULE_8___d35 ||
	     WILL_FIRE_RL_do_rw ;

  // register swd_controller_rnw
  assign swd_controller_rnw$D_IN = MUX_state$write_1__SEL_1 || cmd[2] ;
  assign swd_controller_rnw$EN = swd_controller_request_in$whas ;

  // register swd_controller_state
  always@(MUX_swd_controller_cnt$write_1__SEL_2 or
	  MUX_swd_controller_state$write_1__VAL_1 or
	  MUX_swd_controller_cnt$write_1__SEL_3 or
	  MUX_swd_controller_state$write_1__SEL_3 or
	  MUX_swd_controller_state$write_1__VAL_3 or
	  MUX_swd_controller_state$write_1__SEL_4 or
	  MUX_swd_controller_state$write_1__SEL_5 or
	  MUX_swd_controller_state$write_1__SEL_6 or
	  MUX_swd_controller_cnt$write_1__SEL_4 or
	  MUX_swd_controller_state$write_1__VAL_7)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_swd_controller_cnt$write_1__SEL_2:
	  swd_controller_state$D_IN = MUX_swd_controller_state$write_1__VAL_1;
      MUX_swd_controller_cnt$write_1__SEL_3: swd_controller_state$D_IN = 4'd3;
      MUX_swd_controller_state$write_1__SEL_3:
	  swd_controller_state$D_IN = MUX_swd_controller_state$write_1__VAL_3;
      MUX_swd_controller_state$write_1__SEL_4:
	  swd_controller_state$D_IN = 4'd0;
      MUX_swd_controller_state$write_1__SEL_5:
	  swd_controller_state$D_IN = 4'd2;
      MUX_swd_controller_state$write_1__SEL_6:
	  swd_controller_state$D_IN = 4'd7;
      MUX_swd_controller_cnt$write_1__SEL_4:
	  swd_controller_state$D_IN = MUX_swd_controller_state$write_1__VAL_7;
      default: swd_controller_state$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign swd_controller_state$EN =
	     swd_controller_state == 4'd4 &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd1 ||
	     swd_controller_state == 4'd2 &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd1 ||
	     swd_controller_state == 4'd3 &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd1 &&
	     swd_controller_cnt == 7'd0 ||
	     (swd_controller_state == 4'd7 || swd_controller_state == 4'd8) &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd1 &&
	     swd_controller_cnt == 7'd0 ||
	     swd_controller_state == 4'd1 &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd1 &&
	     swd_controller_cnt == 7'd0 ||
	     (swd_controller_state == 4'd6 || swd_controller_state == 4'd5) &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd1 &&
	     swd_controller_cnt == 7'd0 ||
	     swd_controller_state == 4'd0 &&
	     (swd_controller_request_in$whas ||
	      swd_controller_reset_in$whas) ;

  // register swd_controller_status
  assign swd_controller_status$D_IN =
	     MUX_swd_controller_status$write_1__SEL_1 ?
	       MUX_swd_controller_status$write_1__VAL_1 :
	       3'd2 ;
  assign swd_controller_status$EN =
	     swd_controller_state == 4'd7 &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd0 ||
	     WILL_FIRE_RL_do_rw ;

  // register swd_controller_swclk
  assign swd_controller_swclk$D_IN =
	     !MUX_swd_controller_swclk$write_1__SEL_1 ||
	     swd_controller_prescaler_ctr$Q_OUT != 8'd0 ;
  assign swd_controller_swclk$EN =
	     swd_controller_state != 4'd0 &&
	     (swd_controller_prescaler_ctr$Q_OUT == 8'd0 ||
	      swd_controller_prescaler_ctr$Q_OUT == 8'd50) ||
	     swd_controller_state == 4'd0 &&
	     !swd_controller_request_in$whas &&
	     !swd_controller_reset_in$whas ;

  // register swd_controller_swd_out
  always@(MUX_swd_controller_data$write_1__SEL_2 or
	  swd_controller_data or
	  MUX_swd_controller_swd_out$write_1__SEL_2 or
	  MUX_swd_controller_swd_out$write_1__VAL_2 or
	  MUX_swd_controller_swd_out$write_1__SEL_3 or
	  MUX_swd_controller_swd_out$write_1__VAL_3 or
	  MUX_swd_controller_swd_out$write_1__SEL_4 or
	  MUX_swd_controller_swclk$write_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_swd_controller_data$write_1__SEL_2:
	  swd_controller_swd_out$D_IN = swd_controller_data[0];
      MUX_swd_controller_swd_out$write_1__SEL_2:
	  swd_controller_swd_out$D_IN =
	      MUX_swd_controller_swd_out$write_1__VAL_2;
      MUX_swd_controller_swd_out$write_1__SEL_3:
	  swd_controller_swd_out$D_IN =
	      MUX_swd_controller_swd_out$write_1__VAL_3;
      MUX_swd_controller_swd_out$write_1__SEL_4:
	  swd_controller_swd_out$D_IN = 1'd0;
      MUX_swd_controller_swclk$write_1__SEL_2:
	  swd_controller_swd_out$D_IN = 1'd1;
      default: swd_controller_swd_out$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign swd_controller_swd_out$EN =
	     swd_controller_state == 4'd6 &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd0 ||
	     swd_controller_state == 4'd8 &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd0 ||
	     swd_controller_state == 4'd1 &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd0 ||
	     (swd_controller_state == 4'd4 || swd_controller_state == 4'd2) &&
	     swd_controller_prescaler_ctr$Q_OUT == 8'd0 ||
	     swd_controller_state == 4'd0 &&
	     !swd_controller_request_in$whas &&
	     !swd_controller_reset_in$whas ;

  // register wdata
  assign wdata$D_IN = { wdata[23:0], write_data } ;
  assign wdata$EN = WILL_FIRE_RL_do_bus_write && en_wdata ;

  // submodule swd_controller_prescaler_ctr
  assign swd_controller_prescaler_ctr$DATA_A = 8'h0 ;
  assign swd_controller_prescaler_ctr$DATA_B = 8'd255 ;
  assign swd_controller_prescaler_ctr$DATA_C = 8'h0 ;
  assign swd_controller_prescaler_ctr$DATA_F = 8'd99 ;
  assign swd_controller_prescaler_ctr$ADDA = 1'b0 ;
  assign swd_controller_prescaler_ctr$ADDB =
	     swd_controller_prescaler_ctr$Q_OUT != 8'd0 ;
  assign swd_controller_prescaler_ctr$SETC = 1'b0 ;
  assign swd_controller_prescaler_ctr$SETF =
	     swd_controller_request_in$whas ||
	     swd_controller_prescaler_ctr$Q_OUT == 8'd0 ;

  // remaining internal signals
  assign _0xE79E__q2 = 16'hE79E ;
  assign cmd_BITS_1_TO_0__q1 = cmd[1:0] ;
  assign i__h1364 = 7'd71 - swd_controller_cnt ;
  assign swd_controller_cnt_2_ULE_8___d35 = swd_controller_cnt <= 7'd8 ;
  assign swd_controller_data_2_BIT_0_5_XOR_swd_controll_ETC___d300 =
	     z__h35078 ^ swd_controller_data[32] ;
  assign x__h1345 = _0xE79E__q2[i__h1364[3:0]] ;
  assign x__h14824 = swd_controller_cnt - 7'd1 ;
  assign x__h19907 = x__h19920 ^ cmd_BITS_1_TO_0__q1[1] ;
  assign x__h19920 = x__h19922 ^ cmd_BITS_1_TO_0__q1[0] ;
  assign x__h19922 = ~cmd[3] ;
  assign x__h21060 = x__h21073 ^ cmd_BITS_1_TO_0__q1[1] ;
  assign x__h21073 = cmd[3] ^ cmd_BITS_1_TO_0__q1[0] ;
  assign z__h24307 = wdata[24] ^ wdata[25] ;
  assign z__h24314 = z__h24307 ^ wdata[26] ;
  assign z__h24321 = z__h24314 ^ wdata[27] ;
  assign z__h24328 = z__h24321 ^ wdata[28] ;
  assign z__h24335 = z__h24328 ^ wdata[29] ;
  assign z__h24342 = z__h24335 ^ wdata[30] ;
  assign z__h24349 = z__h24342 ^ wdata[31] ;
  assign z__h24356 = z__h24349 ^ wdata[16] ;
  assign z__h24363 = z__h24356 ^ wdata[17] ;
  assign z__h24370 = z__h24363 ^ wdata[18] ;
  assign z__h24377 = z__h24370 ^ wdata[19] ;
  assign z__h24384 = z__h24377 ^ wdata[20] ;
  assign z__h24391 = z__h24384 ^ wdata[21] ;
  assign z__h24398 = z__h24391 ^ wdata[22] ;
  assign z__h24405 = z__h24398 ^ wdata[23] ;
  assign z__h24412 = z__h24405 ^ wdata[8] ;
  assign z__h24419 = z__h24412 ^ wdata[9] ;
  assign z__h24426 = z__h24419 ^ wdata[10] ;
  assign z__h24433 = z__h24426 ^ wdata[11] ;
  assign z__h24440 = z__h24433 ^ wdata[12] ;
  assign z__h24447 = z__h24440 ^ wdata[13] ;
  assign z__h24454 = z__h24447 ^ wdata[14] ;
  assign z__h24461 = z__h24454 ^ wdata[15] ;
  assign z__h24468 = z__h24461 ^ wdata[0] ;
  assign z__h24475 = z__h24468 ^ wdata[1] ;
  assign z__h24482 = z__h24475 ^ wdata[2] ;
  assign z__h24489 = z__h24482 ^ wdata[3] ;
  assign z__h24496 = z__h24489 ^ wdata[4] ;
  assign z__h24503 = z__h24496 ^ wdata[5] ;
  assign z__h24510 = z__h24503 ^ wdata[6] ;
  assign z__h34868 = swd_controller_data[0] ^ swd_controller_data[1] ;
  assign z__h34875 = z__h34868 ^ swd_controller_data[2] ;
  assign z__h34882 = z__h34875 ^ swd_controller_data[3] ;
  assign z__h34889 = z__h34882 ^ swd_controller_data[4] ;
  assign z__h34896 = z__h34889 ^ swd_controller_data[5] ;
  assign z__h34903 = z__h34896 ^ swd_controller_data[6] ;
  assign z__h34910 = z__h34903 ^ swd_controller_data[7] ;
  assign z__h34917 = z__h34910 ^ swd_controller_data[8] ;
  assign z__h34924 = z__h34917 ^ swd_controller_data[9] ;
  assign z__h34931 = z__h34924 ^ swd_controller_data[10] ;
  assign z__h34938 = z__h34931 ^ swd_controller_data[11] ;
  assign z__h34945 = z__h34938 ^ swd_controller_data[12] ;
  assign z__h34952 = z__h34945 ^ swd_controller_data[13] ;
  assign z__h34959 = z__h34952 ^ swd_controller_data[14] ;
  assign z__h34966 = z__h34959 ^ swd_controller_data[15] ;
  assign z__h34973 = z__h34966 ^ swd_controller_data[16] ;
  assign z__h34980 = z__h34973 ^ swd_controller_data[17] ;
  assign z__h34987 = z__h34980 ^ swd_controller_data[18] ;
  assign z__h34994 = z__h34987 ^ swd_controller_data[19] ;
  assign z__h35001 = z__h34994 ^ swd_controller_data[20] ;
  assign z__h35008 = z__h35001 ^ swd_controller_data[21] ;
  assign z__h35015 = z__h35008 ^ swd_controller_data[22] ;
  assign z__h35022 = z__h35015 ^ swd_controller_data[23] ;
  assign z__h35029 = z__h35022 ^ swd_controller_data[24] ;
  assign z__h35036 = z__h35029 ^ swd_controller_data[25] ;
  assign z__h35043 = z__h35036 ^ swd_controller_data[26] ;
  assign z__h35050 = z__h35043 ^ swd_controller_data[27] ;
  assign z__h35057 = z__h35050 ^ swd_controller_data[28] ;
  assign z__h35064 = z__h35057 ^ swd_controller_data[29] ;
  assign z__h35071 = z__h35064 ^ swd_controller_data[30] ;
  assign z__h35078 = z__h35071 ^ swd_controller_data[31] ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (swd_controller_cnt$EN)
      swd_controller_cnt <= `BSV_ASSIGNMENT_DELAY swd_controller_cnt$D_IN;
    if (swd_controller_data$EN)
      swd_controller_data <= `BSV_ASSIGNMENT_DELAY swd_controller_data$D_IN;
    if (swd_controller_packet$EN)
      swd_controller_packet <= `BSV_ASSIGNMENT_DELAY
	  swd_controller_packet$D_IN;
    if (swd_controller_rnw$EN)
      swd_controller_rnw <= `BSV_ASSIGNMENT_DELAY swd_controller_rnw$D_IN;
  end

  always@(posedge CLK or `BSV_RESET_EDGE RST_N)
  if (RST_N == `BSV_RESET_VALUE)
    begin
      bus_reg_rdata <= `BSV_ASSIGNMENT_DELAY 8'd0;
      bus_reg_status <= `BSV_ASSIGNMENT_DELAY 8'd0;
      cmd <= `BSV_ASSIGNMENT_DELAY 9'd170;
      rdata <= `BSV_ASSIGNMENT_DELAY 32'd0;
      ready <= `BSV_ASSIGNMENT_DELAY 1'd0;
      state <= `BSV_ASSIGNMENT_DELAY 2'd0;
      status <= `BSV_ASSIGNMENT_DELAY 2'd0;
      swd_controller_ack <= `BSV_ASSIGNMENT_DELAY 3'd0;
      swd_controller_out_en <= `BSV_ASSIGNMENT_DELAY 1'd1;
      swd_controller_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
      swd_controller_status <= `BSV_ASSIGNMENT_DELAY 3'd2;
      swd_controller_swclk <= `BSV_ASSIGNMENT_DELAY 1'd0;
      swd_controller_swd_out <= `BSV_ASSIGNMENT_DELAY 1'd0;
      wdata <= `BSV_ASSIGNMENT_DELAY 32'd0;
    end
  else
    begin
      if (bus_reg_rdata$EN)
	bus_reg_rdata <= `BSV_ASSIGNMENT_DELAY bus_reg_rdata$D_IN;
      if (bus_reg_status$EN)
	bus_reg_status <= `BSV_ASSIGNMENT_DELAY bus_reg_status$D_IN;
      if (cmd$EN) cmd <= `BSV_ASSIGNMENT_DELAY cmd$D_IN;
      if (rdata$EN) rdata <= `BSV_ASSIGNMENT_DELAY rdata$D_IN;
      if (ready$EN) ready <= `BSV_ASSIGNMENT_DELAY ready$D_IN;
      if (state$EN) state <= `BSV_ASSIGNMENT_DELAY state$D_IN;
      if (status$EN) status <= `BSV_ASSIGNMENT_DELAY status$D_IN;
      if (swd_controller_ack$EN)
	swd_controller_ack <= `BSV_ASSIGNMENT_DELAY swd_controller_ack$D_IN;
      if (swd_controller_out_en$EN)
	swd_controller_out_en <= `BSV_ASSIGNMENT_DELAY
	    swd_controller_out_en$D_IN;
      if (swd_controller_state$EN)
	swd_controller_state <= `BSV_ASSIGNMENT_DELAY
	    swd_controller_state$D_IN;
      if (swd_controller_status$EN)
	swd_controller_status <= `BSV_ASSIGNMENT_DELAY
	    swd_controller_status$D_IN;
      if (swd_controller_swclk$EN)
	swd_controller_swclk <= `BSV_ASSIGNMENT_DELAY
	    swd_controller_swclk$D_IN;
      if (swd_controller_swd_out$EN)
	swd_controller_swd_out <= `BSV_ASSIGNMENT_DELAY
	    swd_controller_swd_out$D_IN;
      if (wdata$EN) wdata <= `BSV_ASSIGNMENT_DELAY wdata$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    bus_reg_rdata = 8'hAA;
    bus_reg_status = 8'hAA;
    cmd = 9'h0AA;
    rdata = 32'hAAAAAAAA;
    ready = 1'h0;
    state = 2'h2;
    status = 2'h2;
    swd_controller_ack = 3'h2;
    swd_controller_cnt = 7'h2A;
    swd_controller_data = 33'h0AAAAAAAA;
    swd_controller_out_en = 1'h0;
    swd_controller_packet = 8'hAA;
    swd_controller_rnw = 1'h0;
    swd_controller_state = 4'hA;
    swd_controller_status = 3'h2;
    swd_controller_swclk = 1'h0;
    swd_controller_swd_out = 1'h0;
    wdata = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE) $write("state: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (swd_controller_state == 4'd0) $write("IDLE");
    if (RST_N != `BSV_RESET_VALUE)
      if (swd_controller_state == 4'd1) $write("PACKET");
    if (RST_N != `BSV_RESET_VALUE)
      if (swd_controller_state == 4'd2) $write("P_TRN");
    if (RST_N != `BSV_RESET_VALUE)
      if (swd_controller_state == 4'd3) $write("ACK");
    if (RST_N != `BSV_RESET_VALUE)
      if (swd_controller_state == 4'd4) $write("A_TRN");
    if (RST_N != `BSV_RESET_VALUE)
      if (swd_controller_state == 4'd5) $write("RDATA");
    if (RST_N != `BSV_RESET_VALUE)
      if (swd_controller_state == 4'd6) $write("WDATA");
    if (RST_N != `BSV_RESET_VALUE)
      if (swd_controller_state == 4'd7) $write("DONE");
    if (RST_N != `BSV_RESET_VALUE)
      if (swd_controller_state != 4'd0 && swd_controller_state != 4'd1 &&
	  swd_controller_state != 4'd2 &&
	  swd_controller_state != 4'd3 &&
	  swd_controller_state != 4'd4 &&
	  swd_controller_state != 4'd5 &&
	  swd_controller_state != 4'd6 &&
	  swd_controller_state != 4'd7)
	$write("RESET");
    if (RST_N != `BSV_RESET_VALUE)
      $write(", swclk: %b, swd_out: %b, swd_in: %b, out_en: %b",
	     swd_controller_swclk,
	     swd_controller_swd_out,
	     swd_in,
	     swd_controller_out_en,
	     "\n");
  end
  // synopsys translate_on
endmodule  // swd_module

